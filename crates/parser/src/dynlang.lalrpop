use std::string::String;
use lexer::{Token, LexError, QuotedString};
use crate::ast::*;
use tap::Tap;
use span::{Span, Spanned};

grammar;

// macros
Separated<T, U>: Vec<T> = ((<T> U)* T)? => <>.map(|(v, l)| v.tap_mut(|v| v.push(l))).unwrap_or(vec![]);

Punctuated<T, U>: Vec<T> = {
    <v:(<T> U)*> <l:T?> => match l {
		Some(l) => v.tap_mut(|v| v.push(l)),
        None => v,
    }
};

Spanned<T> = @L T @R;

LevelBinExpr<L, O> = {
	Spanned<(LevelBinExpr<L, O> O L)> => Expr::new_lalr_binexpr(<>),
	L,
};
	
// nil
Nil: Nil = <l:@L> "nil" <r:@R> => Nil::new(l..r);

// bool
Boolean: Boolean = {
	<l:@L> "true" <r:@R> => Boolean::new(true, l..r),
	<l:@L> "false" <r:@R> => Boolean::new(false, l..r),
};

// int
Integer: Integer = <l:@L> <v:"int"> <r:@R> => Integer::new(v, l..r);

// string
StringT: StringT = <l:@L> <v:"string"> <r:@R> => StringT::new(v.into_string(), l..r);

// literal
Literal: Literal = {
	Nil => Literal::Nil(<>),
	Boolean => Literal::Boolean(<>),
	Integer => Literal::Integer(<>),
	StringT => Literal::String(<>),
};

// identifier
Ident: Ident = <l:@L> <i:"ident"> <r:@R> => Ident::new_box(Span::new(l, r), i);

// atom
L0: Expr = {
	<l:@L> <i:Literal> <r:@R> => Expr::new(ExprKind::Literal(i), l..r),
	<l:@L> <i:Ident> <r:@R> => Expr::new(ExprKind::Ident(i), l..r),
	"(" <Expr> ")",
	<l:@L> "[" <e:Elements> "]" <r:@R> => Expr::new(ExprKind::Array(Array::new(e, l..r)), l..r),
	<l:@L> "|" <parameters:Parameters> "|" "->" <body:Block> <r:@R> => Expr::new(ExprKind::Function(Function {
		parameters,
		body,
	}), l..r),
	<l:@L> "||" "->" <body:Block> <r:@R> => Expr::new(ExprKind::Function(Function {
		parameters: Parameters(vec![]),
		body,
	}), l..r),
};

L1 = {
	<l:@L> <i:L1> "[" <j:Expr> "]" <r:@R> => Expr::new(ExprKind::index_box(i, j), l..r),
	<l:@L> <i:L1> "(" <j:Arguments> ")" <r:@R> => Expr::new(ExprKind::call_box(i, j), l..r),
	L0,
}

L2 = {
	<l:@L> "-" <i:L2> <r:@R> => Expr::new(ExprKind::unary_minus_box(i), l..r),
	<l:@L> "!" <i:L2> <r:@R> => Expr::new(ExprKind::unary_not_box(i), l..r),
	L1,
}

L3Op: BinExprKind = {
	"*" => BinExprKind::Mul,
	"/" => BinExprKind::Div,
	"%" => BinExprKind::Mod,
}

L3 = LevelBinExpr<L2, L3Op>;

L4Op: BinExprKind = {
	"+" => BinExprKind::Add,
	"-" => BinExprKind::Sub,
}

L4 = LevelBinExpr<L3, L4Op>;

L5Op: BinExprKind = {
	"==" => BinExprKind::Equal,
	"!=" => BinExprKind::NotEqual,
	"<" => BinExprKind::LessThan,
	"<=" => BinExprKind::LessThanEqual,
	">" => BinExprKind::GreaterThan,
	">=" => BinExprKind::GreaterThanEqual,
}

L5 = LevelBinExpr<L4, L5Op>;

L6Op: BinExprKind = "&&" => BinExprKind::And;

L6 = LevelBinExpr<L5, L6Op>;

L7Op: BinExprKind = "||" => BinExprKind::Or;

L7 = LevelBinExpr<L6, L7Op>;

L8 = {
	<l:@L> "let" <i:Ident> "=" <e:L8> <r:@R> => Expr::new(ExprKind::Declare(i, Box::new(e)), l..r),
	<l:@L> "let!" <i:Ident> "=" <e:L8> <r:@R> => Expr::new(ExprKind::DeclareMut(i, Box::new(e)), l..r),
	<l:@L> <i:Ident> "=" <e:L8> <r:@R> => Expr::new(ExprKind::Assign(i, Box::new(e)), l..r),
	<l:@L> <i:Ident> "+=" <e:L8> <r:@R> => Expr::new(ExprKind::AddAssign(i, Box::new(e)), l..r),
	<l:@L> <i:Ident> "-=" <e:L8> <r:@R> => Expr::new(ExprKind::SubAssign(i, Box::new(e)), l..r),
	<l:@L> <i:Ident> "*=" <e:L8> <r:@R> => Expr::new(ExprKind::MulAssign(i, Box::new(e)), l..r),
	<l:@L> <i:Ident> "/=" <e:L8> <r:@R> => Expr::new(ExprKind::DivAssign(i, Box::new(e)), l..r),
	<l:@L> <i:Ident> "%=" <e:L8> <r:@R> => Expr::new(ExprKind::ModAssign(i, Box::new(e)), l..r),
	<l:@L> "return" <i:L8> <r:@R> => Expr::new(ExprKind::return_box(i), l..r),
	<l:@L> "break" <i:L8> <r:@R> => Expr::new(ExprKind::break_box(i), l..r),
	<l:@L> "continue" <i:L8> <r:@R> => Expr::new(ExprKind::continue_box(i), l..r),
	<l:@L> "panic" <i:L8> <r:@R> => Expr::new(ExprKind::panic_box(i), l..r),
	<l:@L> "assert" <i:L8> <r:@R> => Expr::new(ExprKind::assert_box(i), l..r),
	<l:@L> "if" <c:L8> <b:Block> <r:@R> => Expr::new(ExprKind::If { condition: Box::new(c), yes: b }, l..r),
	<l:@L> "if" <c:L8> <t:Block> "else" <f:Block> <r:@R> => Expr::new(ExprKind::IfElse {
		condition: Box::new(c),
		yes: t,
		no: f
	}, l..r),
	<l:@L> "iter" <a:L8> "of" <i:Ident> <b:Block> <r:@R> => Expr::new(ExprKind::For {
		collection: Box::new(a),
		item: i,
		body: b
	}, l..r),
	<l:@L> "|" <parameters:Parameters> "|" "->" <e:L8> <r:@R> => Expr::new(ExprKind::Function(Function {
		parameters,
		body: Code::new_dummy(vec![e]),
	}), l..r),
	<l:@L> "||" "->" <e:L8> <r:@R> => Expr::new(ExprKind::Function(Function {
		parameters: Parameters(vec![]),
		body: Code::new_dummy(vec![e]),
	}), l..r),
	L7,
};

pub Expr = {
	L8,
}

ElementSeparator = { ",", "\n" };

Elements = Punctuated<Expr, ElementSeparator>;

Arguments: Arguments = <Elements> => Arguments(<>);

Parameters: Parameters = Punctuated<Ident, ElementSeparator> => Parameters(<>);
	
pub Code: Code = <l:@L> <s:Punctuated<Expr, "\n"+>> <r:@R> => Code::new(s, l..r);

Block = "{" <Code> "}";

extern {
	type Location = usize;
	type Error = Spanned<LexError>;

	enum Token {
		"+" => Token::Plus,
		"-" => Token::Minus,
		"*" => Token::Asterisk,
		"/" => Token::Slash,
		"%" => Token::Percent,
		"=" => Token::Assign,
		"+=" => Token::PlusAssign,
		"-=" => Token::MinusAssign,
		"*=" => Token::AsteriskAssign,
		"/=" => Token::SlashAssign,
		"%=" => Token::PercentAssign,
		"==" => Token::Equal,
		"!=" => Token::NotEqual,
		"<" => Token::LeftAngledBracket,
		">" => Token::RightAngledBracket,
		"<=" => Token::LessThanEqual,
		">=" => Token::GreaterThanEqual,
		"&&" => Token::DoubleAnd,
		"||" => Token::DoublePipe,
		"(" => Token::LeftParenthesis,
		")" => Token::RightParenthesis,
		"{" => Token::LeftBrace,
		"}" => Token::RightBrace,
		"[" => Token::LeftBracket,
		"]" => Token::RightBracket,
		"!" => Token::Bang,
		"." => Token::Dot,
		"," => Token::Comma,
		"|" => Token::Pipe,
		"@" => Token::At,
		"->" => Token::Arrow,
		"nil" => Token::Nil,
		"true" => Token::True,
		"false" => Token::False,
		"panic" => Token::Panic,
		"assert" => Token::Assert,
		"let" => Token::Let,
		"let!" => Token::LetMut,
		"if" => Token::If,
		"else" => Token::Else,
		"iter" => Token::Iter,
		"of" => Token::Of,
		"return" => Token::Return,
		"break" => Token::Break,
		"continue" => Token::Continue,
		"import" => Token::Import,
		"export" => Token::Export,
		"\n" => Token::NewLine,
		// "lcomment" => Token::LineComment,
		// "bcomment" => Token::BlockComment,
		"int" => Token::Integer(<i32>),
		"string" => Token::String(<QuotedString>),
		"ident" => Token::Identifier(<String>),
	}
}

